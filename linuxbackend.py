import os, sysimport commandsimport confimport easyguiimport globfrom utils import *VBOXMANAGE_EXECUTABLE = "VBoxManage"VIRTUALBOX_EXECUTABLE = "VirtualBox"def getuuid(dev):    return commands.getoutput("blkid -o value -s UUID " + dev)"""def find_device():    found = 0    try_times = 10    # use user defined device    if conf.DEV: return conf.STATUS_NORMAL    # research loop    while try_times > 0:        for device in glob.glob("/dev/sd*[0-9]"):            uuid = getuuid(device)            if uuid == conf.ROOTUUID:                if device[-1] >= "0" and device[-1] <= "9":                    device = device[:-1]                conf.DEV = device                return conf.STATUS_NORMAL        input = dialog_question("Attention",                                "Aucune cle UFO n'a ete trouvee, ressayer ?",                                "Oui",                                "Non")        if input == "Non":            if conf.NEEDDEV: return conf.STATUS_EXIT            input = dialog_question("Attention",                                    "Utiliser un compte invite ?",                                    "Oui",                                    "Quitter")            if input == "Oui": return conf.STATUS_GUEST            return conf.STATUS_EXIT        try_times -= 1    return conf.STATUS_EXIT"""def find_device_by_uuid(dev_uuid):    for device in glob.glob("/dev/sd*[0-9]"):        uuid = getuuid(device)        if uuid == dev_uuid:            if device[-1] >= "0" and device[-1] <= "9":                device = device[:-1]            return device    return ""    def find_device_by_volume(dev_volume):    if path.exists('/dev/disk/by-label/' + dev_volume):        device = path.realpath('/dev/disk/by-label/' + dev_volume)        if device[-1] >= "0" and device[-1] <= "9":            device = device[:-1]        return device    return ""def find_device_by_model(dev_model):    return ""def prepare_device(disk):    call([ "umount", disk ])def get_device_size(dev):    return int(open(path.join("/", "sys", "class", "block", path.basename(dev), "size")).read())def find_network_device():   if conf.NETTYPE == conf.NET_HOST and conf.HOSTNET != "":       return conf.NET_HOST, conf.HOSTNET      return conf.NET_NAT, ""def get_free_ram():    mem_info = open("/proc/meminfo").read()    free = int(grep(mem_info, "MemFree:").split()[1])    cached = int(grep(mem_info, "Cached:").split()[1])    return max((free + cached) / 1024, 384)def get_dvd_device():    if path.exists("/dev/cdrom"):        return "/dev/cdrom"def get_usb_devices():    if os.path.exists('/dev/disk/by-id'):        usb_devices = [ os.path.realpath(os.path.join('/dev/disk/by-id', link)) for link in os.listdir('/dev/disk/by-id') if link[0:3] == "usb" ]        return [ mnt.split()[1] for mnt in open('/proc/mounts','r').readlines() if mnt.split()[0] in usb_devices ]    return []def find_resolution():    if path.exists("/usr/bin/xrandr"):        return commands.getoutput('/usr/bin/xrandr | grep "*"').split()[0]    return ""def build_command():    if conf.STARTVM:        if conf.KIOSKMODE:            return [ path.join(conf.BIN, "VBoxSDL"),  "-vm", conf.VM, "-termacpi", "-fullscreen",                  "-fullscreenresize", "-nofstoggle", "-noresize", "-nohostkeys",  "fnpqrs" ]        else:            return [ path.join(conf.BIN, "VBoxManage"), "startvm", conf.VM ]    else:        return [ path.join(conf.BIN, "VirtualBox") ]def dialog_info(title, msg):    easygui.msgbox(msg, title)def check_privileges():    if os.geteuid() != 0:        dialog_info("Droits insuffisants",                    "Vos permissions ne sont pas suffisantes pour lancer UFO. " + \                    "Veuillez entrer le mot de passe administrateur dans l'invite de " + \                    "la console :")        call([ "su", "-c", sys.executable ])        sys.exit(0)                                                                                 def prepare():    call([ "rmmod", "kvm-intel" ])    call([ "rmmod", "kvm-amd" ])    call([ "rmmod", "kvm" ])def cleanup(command):    passdef kill_resilient_vbox():    call([ "killall", "-9", "VBoxXPCOMIPCD" ])    call([ "killall", "-9", "VBoxSVC" ])def dialog_question(title, msg, button1, button2):    choices = [ button1, button2 ]    reply = easygui.buttonbox(msg, title, choices=choices)    return replydef dialog_info(title, msg):    easygui.msgbox(msg, title)def run_vbox(command, env):    # For some reason, it doesn't work with 'call'    cmd = "VBOX_USER_HOME=" + env["VBOX_USER_HOME"] + " VBOX_PROGRAM_PATH=" + env["VBOX_PROGRAM_PATH"] + " " + " ".join(command)    os.system(cmd)